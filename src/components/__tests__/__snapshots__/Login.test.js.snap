// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`testBasicPageLoadSnapShot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    error=""
    password="testPword"
    success=""
    userName="testUser"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <ToastContainer
          autoClose={1500}
          bodyClassName={null}
          className={null}
          closeButton={
                    <CloseButton
                              ariaLabel="close"
                    />
          }
          closeOnClick={true}
          draggable={true}
          draggablePercent={80}
          hideProgressBar={true}
          newestOnTop={false}
          pauseOnFocusLoss={true}
          pauseOnHover={true}
          pauseOnVisibilityChange={true}
          position="top-center"
          progressClassName={null}
          rtl={false}
          style={null}
          toastClassName={null}
          transition={[Function]}
/>,
        <WithStyles(Card)
          className="login_paper"
>
          <WithStyles(CardContent)>
                    <WithStyles(Typography)
                              color="textPrimary"
                    >
                              Welcome to the Best Bank Site
                    </WithStyles(Typography)>
                    <div>
                              <TextField
                                        className="textFieldOffset"
                                        id="userNameTextField"
                                        label="UserName"
                                        margin="normal"
                                        onChange={[Function]}
                                        required={false}
                                        select={false}
                                        value="testUser"
                                        variant="standard"
                              />
                    </div>
                    <div>
                              <TextField
                                        className="textFieldOffset"
                                        id="passwordTextField"
                                        label="Password"
                                        margin="normal"
                                        onChange={[Function]}
                                        required={false}
                                        select={false}
                                        type="password"
                                        value="testPword"
                                        variant="standard"
                              />
                    </div>
                    <div
                              className="buttonRightAlignment"
                    >
                              <WithStyles(Button)
                                        id="createUserButton"
                                        onClick={[Function]}
                              >
                                        Create New User
                              </WithStyles(Button)>
                              <WithStyles(Button)
                                        id="loginButton"
                                        onClick={[Function]}
                              >
                                        Login
                              </WithStyles(Button)>
                    </div>
          </WithStyles(CardContent)>
</WithStyles(Card)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoClose": 1500,
          "bodyClassName": null,
          "className": null,
          "closeButton": <CloseButton
            ariaLabel="close"
/>,
          "closeOnClick": true,
          "draggable": true,
          "draggablePercent": 80,
          "hideProgressBar": true,
          "newestOnTop": false,
          "pauseOnFocusLoss": true,
          "pauseOnHover": true,
          "pauseOnVisibilityChange": true,
          "position": "top-center",
          "progressClassName": null,
          "rtl": false,
          "style": null,
          "toastClassName": null,
          "transition": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(CardContent)>
            <WithStyles(Typography)
                        color="textPrimary"
            >
                        Welcome to the Best Bank Site
            </WithStyles(Typography)>
            <div>
                        <TextField
                                    className="textFieldOffset"
                                    id="userNameTextField"
                                    label="UserName"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    value="testUser"
                                    variant="standard"
                        />
            </div>
            <div>
                        <TextField
                                    className="textFieldOffset"
                                    id="passwordTextField"
                                    label="Password"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    type="password"
                                    value="testPword"
                                    variant="standard"
                        />
            </div>
            <div
                        className="buttonRightAlignment"
            >
                        <WithStyles(Button)
                                    id="createUserButton"
                                    onClick={[Function]}
                        >
                                    Create New User
                        </WithStyles(Button)>
                        <WithStyles(Button)
                                    id="loginButton"
                                    onClick={[Function]}
                        >
                                    Login
                        </WithStyles(Button)>
            </div>
</WithStyles(CardContent)>,
          "className": "login_paper",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Typography)
                color="textPrimary"
>
                Welcome to the Best Bank Site
</WithStyles(Typography)>,
              <div>
                <TextField
                                className="textFieldOffset"
                                id="userNameTextField"
                                label="UserName"
                                margin="normal"
                                onChange={[Function]}
                                required={false}
                                select={false}
                                value="testUser"
                                variant="standard"
                />
</div>,
              <div>
                <TextField
                                className="textFieldOffset"
                                id="passwordTextField"
                                label="Password"
                                margin="normal"
                                onChange={[Function]}
                                required={false}
                                select={false}
                                type="password"
                                value="testPword"
                                variant="standard"
                />
</div>,
              <div
                className="buttonRightAlignment"
>
                <WithStyles(Button)
                                id="createUserButton"
                                onClick={[Function]}
                >
                                Create New User
                </WithStyles(Button)>
                <WithStyles(Button)
                                id="loginButton"
                                onClick={[Function]}
                >
                                Login
                </WithStyles(Button)>
</div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Welcome to the Best Bank Site",
                "color": "textPrimary",
              },
              "ref": null,
              "rendered": "Welcome to the Best Bank Site",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <TextField
                  className="textFieldOffset"
                  id="userNameTextField"
                  label="UserName"
                  margin="normal"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  value="testUser"
                  variant="standard"
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "textFieldOffset",
                  "id": "userNameTextField",
                  "label": "UserName",
                  "margin": "normal",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "value": "testUser",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <TextField
                  className="textFieldOffset"
                  id="passwordTextField"
                  label="Password"
                  margin="normal"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  type="password"
                  value="testPword"
                  variant="standard"
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "textFieldOffset",
                  "id": "passwordTextField",
                  "label": "Password",
                  "margin": "normal",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "type": "password",
                  "value": "testPword",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <WithStyles(Button)
                    id="createUserButton"
                    onClick={[Function]}
>
                    Create New User
</WithStyles(Button)>,
                  <WithStyles(Button)
                    id="loginButton"
                    onClick={[Function]}
>
                    Login
</WithStyles(Button)>,
                ],
                "className": "buttonRightAlignment",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Create New User",
                    "id": "createUserButton",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Create New User",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Login",
                    "id": "loginButton",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Login",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <ToastContainer
            autoClose={1500}
            bodyClassName={null}
            className={null}
            closeButton={
                        <CloseButton
                                    ariaLabel="close"
                        />
            }
            closeOnClick={true}
            draggable={true}
            draggablePercent={80}
            hideProgressBar={true}
            newestOnTop={false}
            pauseOnFocusLoss={true}
            pauseOnHover={true}
            pauseOnVisibilityChange={true}
            position="top-center"
            progressClassName={null}
            rtl={false}
            style={null}
            toastClassName={null}
            transition={[Function]}
/>,
          <WithStyles(Card)
            className="login_paper"
>
            <WithStyles(CardContent)>
                        <WithStyles(Typography)
                                    color="textPrimary"
                        >
                                    Welcome to the Best Bank Site
                        </WithStyles(Typography)>
                        <div>
                                    <TextField
                                                className="textFieldOffset"
                                                id="userNameTextField"
                                                label="UserName"
                                                margin="normal"
                                                onChange={[Function]}
                                                required={false}
                                                select={false}
                                                value="testUser"
                                                variant="standard"
                                    />
                        </div>
                        <div>
                                    <TextField
                                                className="textFieldOffset"
                                                id="passwordTextField"
                                                label="Password"
                                                margin="normal"
                                                onChange={[Function]}
                                                required={false}
                                                select={false}
                                                type="password"
                                                value="testPword"
                                                variant="standard"
                                    />
                        </div>
                        <div
                                    className="buttonRightAlignment"
                        >
                                    <WithStyles(Button)
                                                id="createUserButton"
                                                onClick={[Function]}
                                    >
                                                Create New User
                                    </WithStyles(Button)>
                                    <WithStyles(Button)
                                                id="loginButton"
                                                onClick={[Function]}
                                    >
                                                Login
                                    </WithStyles(Button)>
                        </div>
            </WithStyles(CardContent)>
</WithStyles(Card)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoClose": 1500,
            "bodyClassName": null,
            "className": null,
            "closeButton": <CloseButton
              ariaLabel="close"
/>,
            "closeOnClick": true,
            "draggable": true,
            "draggablePercent": 80,
            "hideProgressBar": true,
            "newestOnTop": false,
            "pauseOnFocusLoss": true,
            "pauseOnHover": true,
            "pauseOnVisibilityChange": true,
            "position": "top-center",
            "progressClassName": null,
            "rtl": false,
            "style": null,
            "toastClassName": null,
            "transition": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(CardContent)>
              <WithStyles(Typography)
                            color="textPrimary"
              >
                            Welcome to the Best Bank Site
              </WithStyles(Typography)>
              <div>
                            <TextField
                                          className="textFieldOffset"
                                          id="userNameTextField"
                                          label="UserName"
                                          margin="normal"
                                          onChange={[Function]}
                                          required={false}
                                          select={false}
                                          value="testUser"
                                          variant="standard"
                            />
              </div>
              <div>
                            <TextField
                                          className="textFieldOffset"
                                          id="passwordTextField"
                                          label="Password"
                                          margin="normal"
                                          onChange={[Function]}
                                          required={false}
                                          select={false}
                                          type="password"
                                          value="testPword"
                                          variant="standard"
                            />
              </div>
              <div
                            className="buttonRightAlignment"
              >
                            <WithStyles(Button)
                                          id="createUserButton"
                                          onClick={[Function]}
                            >
                                          Create New User
                            </WithStyles(Button)>
                            <WithStyles(Button)
                                          id="loginButton"
                                          onClick={[Function]}
                            >
                                          Login
                            </WithStyles(Button)>
              </div>
</WithStyles(CardContent)>,
            "className": "login_paper",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(Typography)
                  color="textPrimary"
>
                  Welcome to the Best Bank Site
</WithStyles(Typography)>,
                <div>
                  <TextField
                                    className="textFieldOffset"
                                    id="userNameTextField"
                                    label="UserName"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    value="testUser"
                                    variant="standard"
                  />
</div>,
                <div>
                  <TextField
                                    className="textFieldOffset"
                                    id="passwordTextField"
                                    label="Password"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    type="password"
                                    value="testPword"
                                    variant="standard"
                  />
</div>,
                <div
                  className="buttonRightAlignment"
>
                  <WithStyles(Button)
                                    id="createUserButton"
                                    onClick={[Function]}
                  >
                                    Create New User
                  </WithStyles(Button)>
                  <WithStyles(Button)
                                    id="loginButton"
                                    onClick={[Function]}
                  >
                                    Login
                  </WithStyles(Button)>
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Welcome to the Best Bank Site",
                  "color": "textPrimary",
                },
                "ref": null,
                "rendered": "Welcome to the Best Bank Site",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <TextField
                    className="textFieldOffset"
                    id="userNameTextField"
                    label="UserName"
                    margin="normal"
                    onChange={[Function]}
                    required={false}
                    select={false}
                    value="testUser"
                    variant="standard"
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "textFieldOffset",
                    "id": "userNameTextField",
                    "label": "UserName",
                    "margin": "normal",
                    "onChange": [Function],
                    "required": false,
                    "select": false,
                    "value": "testUser",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <TextField
                    className="textFieldOffset"
                    id="passwordTextField"
                    label="Password"
                    margin="normal"
                    onChange={[Function]}
                    required={false}
                    select={false}
                    type="password"
                    value="testPword"
                    variant="standard"
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "textFieldOffset",
                    "id": "passwordTextField",
                    "label": "Password",
                    "margin": "normal",
                    "onChange": [Function],
                    "required": false,
                    "select": false,
                    "type": "password",
                    "value": "testPword",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <WithStyles(Button)
                      id="createUserButton"
                      onClick={[Function]}
>
                      Create New User
</WithStyles(Button)>,
                    <WithStyles(Button)
                      id="loginButton"
                      onClick={[Function]}
>
                      Login
</WithStyles(Button)>,
                  ],
                  "className": "buttonRightAlignment",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Create New User",
                      "id": "createUserButton",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Create New User",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Login",
                      "id": "loginButton",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Login",
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`testBasicPageLoadWithErrorMessage 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    error=""
    password="testPword"
    success="some error message"
    userName="testUser"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <ToastContainer
          autoClose={1500}
          bodyClassName={null}
          className={null}
          closeButton={
                    <CloseButton
                              ariaLabel="close"
                    />
          }
          closeOnClick={true}
          draggable={true}
          draggablePercent={80}
          hideProgressBar={true}
          newestOnTop={false}
          pauseOnFocusLoss={true}
          pauseOnHover={true}
          pauseOnVisibilityChange={true}
          position="top-center"
          progressClassName={null}
          rtl={false}
          style={null}
          toastClassName={null}
          transition={[Function]}
/>,
        <WithStyles(Card)
          className="login_paper"
>
          <WithStyles(CardContent)>
                    <WithStyles(Typography)
                              color="textPrimary"
                    >
                              Welcome to the Best Bank Site
                    </WithStyles(Typography)>
                    <div>
                              <TextField
                                        className="textFieldOffset"
                                        id="userNameTextField"
                                        label="UserName"
                                        margin="normal"
                                        onChange={[Function]}
                                        required={false}
                                        select={false}
                                        value="testUser"
                                        variant="standard"
                              />
                    </div>
                    <div>
                              <TextField
                                        className="textFieldOffset"
                                        id="passwordTextField"
                                        label="Password"
                                        margin="normal"
                                        onChange={[Function]}
                                        required={false}
                                        select={false}
                                        type="password"
                                        value="testPword"
                                        variant="standard"
                              />
                    </div>
                    <div
                              className="buttonRightAlignment"
                    >
                              <WithStyles(Button)
                                        id="createUserButton"
                                        onClick={[Function]}
                              >
                                        Create New User
                              </WithStyles(Button)>
                              <WithStyles(Button)
                                        id="loginButton"
                                        onClick={[Function]}
                              >
                                        Login
                              </WithStyles(Button)>
                    </div>
          </WithStyles(CardContent)>
</WithStyles(Card)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoClose": 1500,
          "bodyClassName": null,
          "className": null,
          "closeButton": <CloseButton
            ariaLabel="close"
/>,
          "closeOnClick": true,
          "draggable": true,
          "draggablePercent": 80,
          "hideProgressBar": true,
          "newestOnTop": false,
          "pauseOnFocusLoss": true,
          "pauseOnHover": true,
          "pauseOnVisibilityChange": true,
          "position": "top-center",
          "progressClassName": null,
          "rtl": false,
          "style": null,
          "toastClassName": null,
          "transition": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(CardContent)>
            <WithStyles(Typography)
                        color="textPrimary"
            >
                        Welcome to the Best Bank Site
            </WithStyles(Typography)>
            <div>
                        <TextField
                                    className="textFieldOffset"
                                    id="userNameTextField"
                                    label="UserName"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    value="testUser"
                                    variant="standard"
                        />
            </div>
            <div>
                        <TextField
                                    className="textFieldOffset"
                                    id="passwordTextField"
                                    label="Password"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    type="password"
                                    value="testPword"
                                    variant="standard"
                        />
            </div>
            <div
                        className="buttonRightAlignment"
            >
                        <WithStyles(Button)
                                    id="createUserButton"
                                    onClick={[Function]}
                        >
                                    Create New User
                        </WithStyles(Button)>
                        <WithStyles(Button)
                                    id="loginButton"
                                    onClick={[Function]}
                        >
                                    Login
                        </WithStyles(Button)>
            </div>
</WithStyles(CardContent)>,
          "className": "login_paper",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Typography)
                color="textPrimary"
>
                Welcome to the Best Bank Site
</WithStyles(Typography)>,
              <div>
                <TextField
                                className="textFieldOffset"
                                id="userNameTextField"
                                label="UserName"
                                margin="normal"
                                onChange={[Function]}
                                required={false}
                                select={false}
                                value="testUser"
                                variant="standard"
                />
</div>,
              <div>
                <TextField
                                className="textFieldOffset"
                                id="passwordTextField"
                                label="Password"
                                margin="normal"
                                onChange={[Function]}
                                required={false}
                                select={false}
                                type="password"
                                value="testPword"
                                variant="standard"
                />
</div>,
              <div
                className="buttonRightAlignment"
>
                <WithStyles(Button)
                                id="createUserButton"
                                onClick={[Function]}
                >
                                Create New User
                </WithStyles(Button)>
                <WithStyles(Button)
                                id="loginButton"
                                onClick={[Function]}
                >
                                Login
                </WithStyles(Button)>
</div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Welcome to the Best Bank Site",
                "color": "textPrimary",
              },
              "ref": null,
              "rendered": "Welcome to the Best Bank Site",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <TextField
                  className="textFieldOffset"
                  id="userNameTextField"
                  label="UserName"
                  margin="normal"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  value="testUser"
                  variant="standard"
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "textFieldOffset",
                  "id": "userNameTextField",
                  "label": "UserName",
                  "margin": "normal",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "value": "testUser",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <TextField
                  className="textFieldOffset"
                  id="passwordTextField"
                  label="Password"
                  margin="normal"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  type="password"
                  value="testPword"
                  variant="standard"
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "textFieldOffset",
                  "id": "passwordTextField",
                  "label": "Password",
                  "margin": "normal",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "type": "password",
                  "value": "testPword",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <WithStyles(Button)
                    id="createUserButton"
                    onClick={[Function]}
>
                    Create New User
</WithStyles(Button)>,
                  <WithStyles(Button)
                    id="loginButton"
                    onClick={[Function]}
>
                    Login
</WithStyles(Button)>,
                ],
                "className": "buttonRightAlignment",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Create New User",
                    "id": "createUserButton",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Create New User",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Login",
                    "id": "loginButton",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Login",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <ToastContainer
            autoClose={1500}
            bodyClassName={null}
            className={null}
            closeButton={
                        <CloseButton
                                    ariaLabel="close"
                        />
            }
            closeOnClick={true}
            draggable={true}
            draggablePercent={80}
            hideProgressBar={true}
            newestOnTop={false}
            pauseOnFocusLoss={true}
            pauseOnHover={true}
            pauseOnVisibilityChange={true}
            position="top-center"
            progressClassName={null}
            rtl={false}
            style={null}
            toastClassName={null}
            transition={[Function]}
/>,
          <WithStyles(Card)
            className="login_paper"
>
            <WithStyles(CardContent)>
                        <WithStyles(Typography)
                                    color="textPrimary"
                        >
                                    Welcome to the Best Bank Site
                        </WithStyles(Typography)>
                        <div>
                                    <TextField
                                                className="textFieldOffset"
                                                id="userNameTextField"
                                                label="UserName"
                                                margin="normal"
                                                onChange={[Function]}
                                                required={false}
                                                select={false}
                                                value="testUser"
                                                variant="standard"
                                    />
                        </div>
                        <div>
                                    <TextField
                                                className="textFieldOffset"
                                                id="passwordTextField"
                                                label="Password"
                                                margin="normal"
                                                onChange={[Function]}
                                                required={false}
                                                select={false}
                                                type="password"
                                                value="testPword"
                                                variant="standard"
                                    />
                        </div>
                        <div
                                    className="buttonRightAlignment"
                        >
                                    <WithStyles(Button)
                                                id="createUserButton"
                                                onClick={[Function]}
                                    >
                                                Create New User
                                    </WithStyles(Button)>
                                    <WithStyles(Button)
                                                id="loginButton"
                                                onClick={[Function]}
                                    >
                                                Login
                                    </WithStyles(Button)>
                        </div>
            </WithStyles(CardContent)>
</WithStyles(Card)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoClose": 1500,
            "bodyClassName": null,
            "className": null,
            "closeButton": <CloseButton
              ariaLabel="close"
/>,
            "closeOnClick": true,
            "draggable": true,
            "draggablePercent": 80,
            "hideProgressBar": true,
            "newestOnTop": false,
            "pauseOnFocusLoss": true,
            "pauseOnHover": true,
            "pauseOnVisibilityChange": true,
            "position": "top-center",
            "progressClassName": null,
            "rtl": false,
            "style": null,
            "toastClassName": null,
            "transition": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(CardContent)>
              <WithStyles(Typography)
                            color="textPrimary"
              >
                            Welcome to the Best Bank Site
              </WithStyles(Typography)>
              <div>
                            <TextField
                                          className="textFieldOffset"
                                          id="userNameTextField"
                                          label="UserName"
                                          margin="normal"
                                          onChange={[Function]}
                                          required={false}
                                          select={false}
                                          value="testUser"
                                          variant="standard"
                            />
              </div>
              <div>
                            <TextField
                                          className="textFieldOffset"
                                          id="passwordTextField"
                                          label="Password"
                                          margin="normal"
                                          onChange={[Function]}
                                          required={false}
                                          select={false}
                                          type="password"
                                          value="testPword"
                                          variant="standard"
                            />
              </div>
              <div
                            className="buttonRightAlignment"
              >
                            <WithStyles(Button)
                                          id="createUserButton"
                                          onClick={[Function]}
                            >
                                          Create New User
                            </WithStyles(Button)>
                            <WithStyles(Button)
                                          id="loginButton"
                                          onClick={[Function]}
                            >
                                          Login
                            </WithStyles(Button)>
              </div>
</WithStyles(CardContent)>,
            "className": "login_paper",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(Typography)
                  color="textPrimary"
>
                  Welcome to the Best Bank Site
</WithStyles(Typography)>,
                <div>
                  <TextField
                                    className="textFieldOffset"
                                    id="userNameTextField"
                                    label="UserName"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    value="testUser"
                                    variant="standard"
                  />
</div>,
                <div>
                  <TextField
                                    className="textFieldOffset"
                                    id="passwordTextField"
                                    label="Password"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    type="password"
                                    value="testPword"
                                    variant="standard"
                  />
</div>,
                <div
                  className="buttonRightAlignment"
>
                  <WithStyles(Button)
                                    id="createUserButton"
                                    onClick={[Function]}
                  >
                                    Create New User
                  </WithStyles(Button)>
                  <WithStyles(Button)
                                    id="loginButton"
                                    onClick={[Function]}
                  >
                                    Login
                  </WithStyles(Button)>
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Welcome to the Best Bank Site",
                  "color": "textPrimary",
                },
                "ref": null,
                "rendered": "Welcome to the Best Bank Site",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <TextField
                    className="textFieldOffset"
                    id="userNameTextField"
                    label="UserName"
                    margin="normal"
                    onChange={[Function]}
                    required={false}
                    select={false}
                    value="testUser"
                    variant="standard"
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "textFieldOffset",
                    "id": "userNameTextField",
                    "label": "UserName",
                    "margin": "normal",
                    "onChange": [Function],
                    "required": false,
                    "select": false,
                    "value": "testUser",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <TextField
                    className="textFieldOffset"
                    id="passwordTextField"
                    label="Password"
                    margin="normal"
                    onChange={[Function]}
                    required={false}
                    select={false}
                    type="password"
                    value="testPword"
                    variant="standard"
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "textFieldOffset",
                    "id": "passwordTextField",
                    "label": "Password",
                    "margin": "normal",
                    "onChange": [Function],
                    "required": false,
                    "select": false,
                    "type": "password",
                    "value": "testPword",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <WithStyles(Button)
                      id="createUserButton"
                      onClick={[Function]}
>
                      Create New User
</WithStyles(Button)>,
                    <WithStyles(Button)
                      id="loginButton"
                      onClick={[Function]}
>
                      Login
</WithStyles(Button)>,
                  ],
                  "className": "buttonRightAlignment",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Create New User",
                      "id": "createUserButton",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Create New User",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Login",
                      "id": "loginButton",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Login",
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`testBasicPageLoadWithStateChange 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    error=""
    password="testPword"
    success=""
    userName="testUser"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <ToastContainer
          autoClose={1500}
          bodyClassName={null}
          className={null}
          closeButton={
                    <CloseButton
                              ariaLabel="close"
                    />
          }
          closeOnClick={true}
          draggable={true}
          draggablePercent={80}
          hideProgressBar={true}
          newestOnTop={false}
          pauseOnFocusLoss={true}
          pauseOnHover={true}
          pauseOnVisibilityChange={true}
          position="top-center"
          progressClassName={null}
          rtl={false}
          style={null}
          toastClassName={null}
          transition={[Function]}
/>,
        <WithStyles(Card)
          className="login_paper"
>
          <WithStyles(CardContent)>
                    <WithStyles(Typography)
                              color="textPrimary"
                    >
                              Welcome to the Best Bank Site
                    </WithStyles(Typography)>
                    <div>
                              <TextField
                                        className="textFieldOffset"
                                        id="userNameTextField"
                                        label="UserName"
                                        margin="normal"
                                        onChange={[Function]}
                                        required={false}
                                        select={false}
                                        value="newUserName"
                                        variant="standard"
                              />
                    </div>
                    <div>
                              <TextField
                                        className="textFieldOffset"
                                        id="passwordTextField"
                                        label="Password"
                                        margin="normal"
                                        onChange={[Function]}
                                        required={false}
                                        select={false}
                                        type="password"
                                        value="testPword"
                                        variant="standard"
                              />
                    </div>
                    <div
                              className="buttonRightAlignment"
                    >
                              <WithStyles(Button)
                                        id="createUserButton"
                                        onClick={[Function]}
                              >
                                        Create New User
                              </WithStyles(Button)>
                              <WithStyles(Button)
                                        id="loginButton"
                                        onClick={[Function]}
                              >
                                        Login
                              </WithStyles(Button)>
                    </div>
          </WithStyles(CardContent)>
</WithStyles(Card)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoClose": 1500,
          "bodyClassName": null,
          "className": null,
          "closeButton": <CloseButton
            ariaLabel="close"
/>,
          "closeOnClick": true,
          "draggable": true,
          "draggablePercent": 80,
          "hideProgressBar": true,
          "newestOnTop": false,
          "pauseOnFocusLoss": true,
          "pauseOnHover": true,
          "pauseOnVisibilityChange": true,
          "position": "top-center",
          "progressClassName": null,
          "rtl": false,
          "style": null,
          "toastClassName": null,
          "transition": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(CardContent)>
            <WithStyles(Typography)
                        color="textPrimary"
            >
                        Welcome to the Best Bank Site
            </WithStyles(Typography)>
            <div>
                        <TextField
                                    className="textFieldOffset"
                                    id="userNameTextField"
                                    label="UserName"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    value="newUserName"
                                    variant="standard"
                        />
            </div>
            <div>
                        <TextField
                                    className="textFieldOffset"
                                    id="passwordTextField"
                                    label="Password"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    type="password"
                                    value="testPword"
                                    variant="standard"
                        />
            </div>
            <div
                        className="buttonRightAlignment"
            >
                        <WithStyles(Button)
                                    id="createUserButton"
                                    onClick={[Function]}
                        >
                                    Create New User
                        </WithStyles(Button)>
                        <WithStyles(Button)
                                    id="loginButton"
                                    onClick={[Function]}
                        >
                                    Login
                        </WithStyles(Button)>
            </div>
</WithStyles(CardContent)>,
          "className": "login_paper",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Typography)
                color="textPrimary"
>
                Welcome to the Best Bank Site
</WithStyles(Typography)>,
              <div>
                <TextField
                                className="textFieldOffset"
                                id="userNameTextField"
                                label="UserName"
                                margin="normal"
                                onChange={[Function]}
                                required={false}
                                select={false}
                                value="newUserName"
                                variant="standard"
                />
</div>,
              <div>
                <TextField
                                className="textFieldOffset"
                                id="passwordTextField"
                                label="Password"
                                margin="normal"
                                onChange={[Function]}
                                required={false}
                                select={false}
                                type="password"
                                value="testPword"
                                variant="standard"
                />
</div>,
              <div
                className="buttonRightAlignment"
>
                <WithStyles(Button)
                                id="createUserButton"
                                onClick={[Function]}
                >
                                Create New User
                </WithStyles(Button)>
                <WithStyles(Button)
                                id="loginButton"
                                onClick={[Function]}
                >
                                Login
                </WithStyles(Button)>
</div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Welcome to the Best Bank Site",
                "color": "textPrimary",
              },
              "ref": null,
              "rendered": "Welcome to the Best Bank Site",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <TextField
                  className="textFieldOffset"
                  id="userNameTextField"
                  label="UserName"
                  margin="normal"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  value="newUserName"
                  variant="standard"
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "textFieldOffset",
                  "id": "userNameTextField",
                  "label": "UserName",
                  "margin": "normal",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "value": "newUserName",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <TextField
                  className="textFieldOffset"
                  id="passwordTextField"
                  label="Password"
                  margin="normal"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  type="password"
                  value="testPword"
                  variant="standard"
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "textFieldOffset",
                  "id": "passwordTextField",
                  "label": "Password",
                  "margin": "normal",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "type": "password",
                  "value": "testPword",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <WithStyles(Button)
                    id="createUserButton"
                    onClick={[Function]}
>
                    Create New User
</WithStyles(Button)>,
                  <WithStyles(Button)
                    id="loginButton"
                    onClick={[Function]}
>
                    Login
</WithStyles(Button)>,
                ],
                "className": "buttonRightAlignment",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Create New User",
                    "id": "createUserButton",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Create New User",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Login",
                    "id": "loginButton",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Login",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <ToastContainer
            autoClose={1500}
            bodyClassName={null}
            className={null}
            closeButton={
                        <CloseButton
                                    ariaLabel="close"
                        />
            }
            closeOnClick={true}
            draggable={true}
            draggablePercent={80}
            hideProgressBar={true}
            newestOnTop={false}
            pauseOnFocusLoss={true}
            pauseOnHover={true}
            pauseOnVisibilityChange={true}
            position="top-center"
            progressClassName={null}
            rtl={false}
            style={null}
            toastClassName={null}
            transition={[Function]}
/>,
          <WithStyles(Card)
            className="login_paper"
>
            <WithStyles(CardContent)>
                        <WithStyles(Typography)
                                    color="textPrimary"
                        >
                                    Welcome to the Best Bank Site
                        </WithStyles(Typography)>
                        <div>
                                    <TextField
                                                className="textFieldOffset"
                                                id="userNameTextField"
                                                label="UserName"
                                                margin="normal"
                                                onChange={[Function]}
                                                required={false}
                                                select={false}
                                                value="newUserName"
                                                variant="standard"
                                    />
                        </div>
                        <div>
                                    <TextField
                                                className="textFieldOffset"
                                                id="passwordTextField"
                                                label="Password"
                                                margin="normal"
                                                onChange={[Function]}
                                                required={false}
                                                select={false}
                                                type="password"
                                                value="testPword"
                                                variant="standard"
                                    />
                        </div>
                        <div
                                    className="buttonRightAlignment"
                        >
                                    <WithStyles(Button)
                                                id="createUserButton"
                                                onClick={[Function]}
                                    >
                                                Create New User
                                    </WithStyles(Button)>
                                    <WithStyles(Button)
                                                id="loginButton"
                                                onClick={[Function]}
                                    >
                                                Login
                                    </WithStyles(Button)>
                        </div>
            </WithStyles(CardContent)>
</WithStyles(Card)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoClose": 1500,
            "bodyClassName": null,
            "className": null,
            "closeButton": <CloseButton
              ariaLabel="close"
/>,
            "closeOnClick": true,
            "draggable": true,
            "draggablePercent": 80,
            "hideProgressBar": true,
            "newestOnTop": false,
            "pauseOnFocusLoss": true,
            "pauseOnHover": true,
            "pauseOnVisibilityChange": true,
            "position": "top-center",
            "progressClassName": null,
            "rtl": false,
            "style": null,
            "toastClassName": null,
            "transition": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(CardContent)>
              <WithStyles(Typography)
                            color="textPrimary"
              >
                            Welcome to the Best Bank Site
              </WithStyles(Typography)>
              <div>
                            <TextField
                                          className="textFieldOffset"
                                          id="userNameTextField"
                                          label="UserName"
                                          margin="normal"
                                          onChange={[Function]}
                                          required={false}
                                          select={false}
                                          value="newUserName"
                                          variant="standard"
                            />
              </div>
              <div>
                            <TextField
                                          className="textFieldOffset"
                                          id="passwordTextField"
                                          label="Password"
                                          margin="normal"
                                          onChange={[Function]}
                                          required={false}
                                          select={false}
                                          type="password"
                                          value="testPword"
                                          variant="standard"
                            />
              </div>
              <div
                            className="buttonRightAlignment"
              >
                            <WithStyles(Button)
                                          id="createUserButton"
                                          onClick={[Function]}
                            >
                                          Create New User
                            </WithStyles(Button)>
                            <WithStyles(Button)
                                          id="loginButton"
                                          onClick={[Function]}
                            >
                                          Login
                            </WithStyles(Button)>
              </div>
</WithStyles(CardContent)>,
            "className": "login_paper",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(Typography)
                  color="textPrimary"
>
                  Welcome to the Best Bank Site
</WithStyles(Typography)>,
                <div>
                  <TextField
                                    className="textFieldOffset"
                                    id="userNameTextField"
                                    label="UserName"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    value="newUserName"
                                    variant="standard"
                  />
</div>,
                <div>
                  <TextField
                                    className="textFieldOffset"
                                    id="passwordTextField"
                                    label="Password"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    type="password"
                                    value="testPword"
                                    variant="standard"
                  />
</div>,
                <div
                  className="buttonRightAlignment"
>
                  <WithStyles(Button)
                                    id="createUserButton"
                                    onClick={[Function]}
                  >
                                    Create New User
                  </WithStyles(Button)>
                  <WithStyles(Button)
                                    id="loginButton"
                                    onClick={[Function]}
                  >
                                    Login
                  </WithStyles(Button)>
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Welcome to the Best Bank Site",
                  "color": "textPrimary",
                },
                "ref": null,
                "rendered": "Welcome to the Best Bank Site",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <TextField
                    className="textFieldOffset"
                    id="userNameTextField"
                    label="UserName"
                    margin="normal"
                    onChange={[Function]}
                    required={false}
                    select={false}
                    value="newUserName"
                    variant="standard"
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "textFieldOffset",
                    "id": "userNameTextField",
                    "label": "UserName",
                    "margin": "normal",
                    "onChange": [Function],
                    "required": false,
                    "select": false,
                    "value": "newUserName",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <TextField
                    className="textFieldOffset"
                    id="passwordTextField"
                    label="Password"
                    margin="normal"
                    onChange={[Function]}
                    required={false}
                    select={false}
                    type="password"
                    value="testPword"
                    variant="standard"
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "textFieldOffset",
                    "id": "passwordTextField",
                    "label": "Password",
                    "margin": "normal",
                    "onChange": [Function],
                    "required": false,
                    "select": false,
                    "type": "password",
                    "value": "testPword",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <WithStyles(Button)
                      id="createUserButton"
                      onClick={[Function]}
>
                      Create New User
</WithStyles(Button)>,
                    <WithStyles(Button)
                      id="loginButton"
                      onClick={[Function]}
>
                      Login
</WithStyles(Button)>,
                  ],
                  "className": "buttonRightAlignment",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Create New User",
                      "id": "createUserButton",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Create New User",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Login",
                      "id": "loginButton",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Login",
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`testBasicPageLoadWithSuccessMessage 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    error=""
    password="testPword"
    success="some success message"
    userName="testUser"
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <ToastContainer
          autoClose={1500}
          bodyClassName={null}
          className={null}
          closeButton={
                    <CloseButton
                              ariaLabel="close"
                    />
          }
          closeOnClick={true}
          draggable={true}
          draggablePercent={80}
          hideProgressBar={true}
          newestOnTop={false}
          pauseOnFocusLoss={true}
          pauseOnHover={true}
          pauseOnVisibilityChange={true}
          position="top-center"
          progressClassName={null}
          rtl={false}
          style={null}
          toastClassName={null}
          transition={[Function]}
/>,
        <WithStyles(Card)
          className="login_paper"
>
          <WithStyles(CardContent)>
                    <WithStyles(Typography)
                              color="textPrimary"
                    >
                              Welcome to the Best Bank Site
                    </WithStyles(Typography)>
                    <div>
                              <TextField
                                        className="textFieldOffset"
                                        id="userNameTextField"
                                        label="UserName"
                                        margin="normal"
                                        onChange={[Function]}
                                        required={false}
                                        select={false}
                                        value="testUser"
                                        variant="standard"
                              />
                    </div>
                    <div>
                              <TextField
                                        className="textFieldOffset"
                                        id="passwordTextField"
                                        label="Password"
                                        margin="normal"
                                        onChange={[Function]}
                                        required={false}
                                        select={false}
                                        type="password"
                                        value="testPword"
                                        variant="standard"
                              />
                    </div>
                    <div
                              className="buttonRightAlignment"
                    >
                              <WithStyles(Button)
                                        id="createUserButton"
                                        onClick={[Function]}
                              >
                                        Create New User
                              </WithStyles(Button)>
                              <WithStyles(Button)
                                        id="loginButton"
                                        onClick={[Function]}
                              >
                                        Login
                              </WithStyles(Button)>
                    </div>
          </WithStyles(CardContent)>
</WithStyles(Card)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoClose": 1500,
          "bodyClassName": null,
          "className": null,
          "closeButton": <CloseButton
            ariaLabel="close"
/>,
          "closeOnClick": true,
          "draggable": true,
          "draggablePercent": 80,
          "hideProgressBar": true,
          "newestOnTop": false,
          "pauseOnFocusLoss": true,
          "pauseOnHover": true,
          "pauseOnVisibilityChange": true,
          "position": "top-center",
          "progressClassName": null,
          "rtl": false,
          "style": null,
          "toastClassName": null,
          "transition": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <WithStyles(CardContent)>
            <WithStyles(Typography)
                        color="textPrimary"
            >
                        Welcome to the Best Bank Site
            </WithStyles(Typography)>
            <div>
                        <TextField
                                    className="textFieldOffset"
                                    id="userNameTextField"
                                    label="UserName"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    value="testUser"
                                    variant="standard"
                        />
            </div>
            <div>
                        <TextField
                                    className="textFieldOffset"
                                    id="passwordTextField"
                                    label="Password"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    type="password"
                                    value="testPword"
                                    variant="standard"
                        />
            </div>
            <div
                        className="buttonRightAlignment"
            >
                        <WithStyles(Button)
                                    id="createUserButton"
                                    onClick={[Function]}
                        >
                                    Create New User
                        </WithStyles(Button)>
                        <WithStyles(Button)
                                    id="loginButton"
                                    onClick={[Function]}
                        >
                                    Login
                        </WithStyles(Button)>
            </div>
</WithStyles(CardContent)>,
          "className": "login_paper",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(Typography)
                color="textPrimary"
>
                Welcome to the Best Bank Site
</WithStyles(Typography)>,
              <div>
                <TextField
                                className="textFieldOffset"
                                id="userNameTextField"
                                label="UserName"
                                margin="normal"
                                onChange={[Function]}
                                required={false}
                                select={false}
                                value="testUser"
                                variant="standard"
                />
</div>,
              <div>
                <TextField
                                className="textFieldOffset"
                                id="passwordTextField"
                                label="Password"
                                margin="normal"
                                onChange={[Function]}
                                required={false}
                                select={false}
                                type="password"
                                value="testPword"
                                variant="standard"
                />
</div>,
              <div
                className="buttonRightAlignment"
>
                <WithStyles(Button)
                                id="createUserButton"
                                onClick={[Function]}
                >
                                Create New User
                </WithStyles(Button)>
                <WithStyles(Button)
                                id="loginButton"
                                onClick={[Function]}
                >
                                Login
                </WithStyles(Button)>
</div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Welcome to the Best Bank Site",
                "color": "textPrimary",
              },
              "ref": null,
              "rendered": "Welcome to the Best Bank Site",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <TextField
                  className="textFieldOffset"
                  id="userNameTextField"
                  label="UserName"
                  margin="normal"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  value="testUser"
                  variant="standard"
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "textFieldOffset",
                  "id": "userNameTextField",
                  "label": "UserName",
                  "margin": "normal",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "value": "testUser",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <TextField
                  className="textFieldOffset"
                  id="passwordTextField"
                  label="Password"
                  margin="normal"
                  onChange={[Function]}
                  required={false}
                  select={false}
                  type="password"
                  value="testPword"
                  variant="standard"
/>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "textFieldOffset",
                  "id": "passwordTextField",
                  "label": "Password",
                  "margin": "normal",
                  "onChange": [Function],
                  "required": false,
                  "select": false,
                  "type": "password",
                  "value": "testPword",
                  "variant": "standard",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <WithStyles(Button)
                    id="createUserButton"
                    onClick={[Function]}
>
                    Create New User
</WithStyles(Button)>,
                  <WithStyles(Button)
                    id="loginButton"
                    onClick={[Function]}
>
                    Login
</WithStyles(Button)>,
                ],
                "className": "buttonRightAlignment",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Create New User",
                    "id": "createUserButton",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Create New User",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Login",
                    "id": "loginButton",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Login",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <ToastContainer
            autoClose={1500}
            bodyClassName={null}
            className={null}
            closeButton={
                        <CloseButton
                                    ariaLabel="close"
                        />
            }
            closeOnClick={true}
            draggable={true}
            draggablePercent={80}
            hideProgressBar={true}
            newestOnTop={false}
            pauseOnFocusLoss={true}
            pauseOnHover={true}
            pauseOnVisibilityChange={true}
            position="top-center"
            progressClassName={null}
            rtl={false}
            style={null}
            toastClassName={null}
            transition={[Function]}
/>,
          <WithStyles(Card)
            className="login_paper"
>
            <WithStyles(CardContent)>
                        <WithStyles(Typography)
                                    color="textPrimary"
                        >
                                    Welcome to the Best Bank Site
                        </WithStyles(Typography)>
                        <div>
                                    <TextField
                                                className="textFieldOffset"
                                                id="userNameTextField"
                                                label="UserName"
                                                margin="normal"
                                                onChange={[Function]}
                                                required={false}
                                                select={false}
                                                value="testUser"
                                                variant="standard"
                                    />
                        </div>
                        <div>
                                    <TextField
                                                className="textFieldOffset"
                                                id="passwordTextField"
                                                label="Password"
                                                margin="normal"
                                                onChange={[Function]}
                                                required={false}
                                                select={false}
                                                type="password"
                                                value="testPword"
                                                variant="standard"
                                    />
                        </div>
                        <div
                                    className="buttonRightAlignment"
                        >
                                    <WithStyles(Button)
                                                id="createUserButton"
                                                onClick={[Function]}
                                    >
                                                Create New User
                                    </WithStyles(Button)>
                                    <WithStyles(Button)
                                                id="loginButton"
                                                onClick={[Function]}
                                    >
                                                Login
                                    </WithStyles(Button)>
                        </div>
            </WithStyles(CardContent)>
</WithStyles(Card)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "autoClose": 1500,
            "bodyClassName": null,
            "className": null,
            "closeButton": <CloseButton
              ariaLabel="close"
/>,
            "closeOnClick": true,
            "draggable": true,
            "draggablePercent": 80,
            "hideProgressBar": true,
            "newestOnTop": false,
            "pauseOnFocusLoss": true,
            "pauseOnHover": true,
            "pauseOnVisibilityChange": true,
            "position": "top-center",
            "progressClassName": null,
            "rtl": false,
            "style": null,
            "toastClassName": null,
            "transition": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(CardContent)>
              <WithStyles(Typography)
                            color="textPrimary"
              >
                            Welcome to the Best Bank Site
              </WithStyles(Typography)>
              <div>
                            <TextField
                                          className="textFieldOffset"
                                          id="userNameTextField"
                                          label="UserName"
                                          margin="normal"
                                          onChange={[Function]}
                                          required={false}
                                          select={false}
                                          value="testUser"
                                          variant="standard"
                            />
              </div>
              <div>
                            <TextField
                                          className="textFieldOffset"
                                          id="passwordTextField"
                                          label="Password"
                                          margin="normal"
                                          onChange={[Function]}
                                          required={false}
                                          select={false}
                                          type="password"
                                          value="testPword"
                                          variant="standard"
                            />
              </div>
              <div
                            className="buttonRightAlignment"
              >
                            <WithStyles(Button)
                                          id="createUserButton"
                                          onClick={[Function]}
                            >
                                          Create New User
                            </WithStyles(Button)>
                            <WithStyles(Button)
                                          id="loginButton"
                                          onClick={[Function]}
                            >
                                          Login
                            </WithStyles(Button)>
              </div>
</WithStyles(CardContent)>,
            "className": "login_paper",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <WithStyles(Typography)
                  color="textPrimary"
>
                  Welcome to the Best Bank Site
</WithStyles(Typography)>,
                <div>
                  <TextField
                                    className="textFieldOffset"
                                    id="userNameTextField"
                                    label="UserName"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    value="testUser"
                                    variant="standard"
                  />
</div>,
                <div>
                  <TextField
                                    className="textFieldOffset"
                                    id="passwordTextField"
                                    label="Password"
                                    margin="normal"
                                    onChange={[Function]}
                                    required={false}
                                    select={false}
                                    type="password"
                                    value="testPword"
                                    variant="standard"
                  />
</div>,
                <div
                  className="buttonRightAlignment"
>
                  <WithStyles(Button)
                                    id="createUserButton"
                                    onClick={[Function]}
                  >
                                    Create New User
                  </WithStyles(Button)>
                  <WithStyles(Button)
                                    id="loginButton"
                                    onClick={[Function]}
                  >
                                    Login
                  </WithStyles(Button)>
</div>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Welcome to the Best Bank Site",
                  "color": "textPrimary",
                },
                "ref": null,
                "rendered": "Welcome to the Best Bank Site",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <TextField
                    className="textFieldOffset"
                    id="userNameTextField"
                    label="UserName"
                    margin="normal"
                    onChange={[Function]}
                    required={false}
                    select={false}
                    value="testUser"
                    variant="standard"
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "textFieldOffset",
                    "id": "userNameTextField",
                    "label": "UserName",
                    "margin": "normal",
                    "onChange": [Function],
                    "required": false,
                    "select": false,
                    "value": "testUser",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <TextField
                    className="textFieldOffset"
                    id="passwordTextField"
                    label="Password"
                    margin="normal"
                    onChange={[Function]}
                    required={false}
                    select={false}
                    type="password"
                    value="testPword"
                    variant="standard"
/>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "textFieldOffset",
                    "id": "passwordTextField",
                    "label": "Password",
                    "margin": "normal",
                    "onChange": [Function],
                    "required": false,
                    "select": false,
                    "type": "password",
                    "value": "testPword",
                    "variant": "standard",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <WithStyles(Button)
                      id="createUserButton"
                      onClick={[Function]}
>
                      Create New User
</WithStyles(Button)>,
                    <WithStyles(Button)
                      id="loginButton"
                      onClick={[Function]}
>
                      Login
</WithStyles(Button)>,
                  ],
                  "className": "buttonRightAlignment",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Create New User",
                      "id": "createUserButton",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Create New User",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Login",
                      "id": "loginButton",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Login",
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
